import React from "react";
import {
  TextField,
  Button,
  CircularProgress,
  Paper,
  Typography,
  Box,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
} from "@mui/material";
import { useDropzone } from "react-dropzone";

const InputForm = ({
  cvFile,
  jdText,
  jobCategory,
  jobPosition,
  jobRequirements,
  loading,
  error,
  onDrop,
  setJdText,
  setJobCategory,
  setJobPosition,
  setJobRequirements,
  handleSubmit,
}) => {
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "application/pdf": [".pdf"],
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        [".docx"],
      "text/plain": [".txt"],
    },
    maxFiles: 1,
  });

  // Danh s√°ch ng√†nh ngh·ªÅ
  const jobCategories = [
    { value: "INFORMATION-TECHNOLOGY", label: "C√¥ng ngh·ªá th√¥ng tin" },
    { value: "ENGINEERING", label: "K·ªπ thu·∫≠t" },
    { value: "FINANCE", label: "T√†i ch√≠nh" },
    { value: "SALES", label: "Kinh doanh/B√°n h√†ng" },
    { value: "HR", label: "Nh√¢n s·ª±" },
    { value: "MARKETING", label: "Marketing" },
    { value: "HEALTHCARE", label: "Y t·∫ø" },
    { value: "EDUCATION", label: "Gi√°o d·ª•c" },
    { value: "CONSULTANT", label: "T∆∞ v·∫•n" },
    { value: "DESIGNER", label: "Thi·∫øt k·∫ø" },
    { value: "ACCOUNTANT", label: "K·∫ø to√°n" },
    { value: "LAWYER", label: "Lu·∫≠t s∆∞" },
    { value: "OTHER", label: "Kh√°c" },
  ];

  // Mapping v·ªã tr√≠ c·ª• th·ªÉ theo ng√†nh ngh·ªÅ
  const jobPositions = {
    "INFORMATION-TECHNOLOGY": [
      { value: "FRONTEND_DEVELOPER", label: "L·∫≠p tr√¨nh vi√™n Front-end" },
      { value: "BACKEND_DEVELOPER", label: "L·∫≠p tr√¨nh vi√™n Back-end" },
      { value: "FULLSTACK_DEVELOPER", label: "L·∫≠p tr√¨nh vi√™n Full-stack" },
      { value: "MOBILE_DEVELOPER", label: "L·∫≠p tr√¨nh vi√™n Mobile" },
      { value: "DATA_SCIENTIST", label: "Nh√† khoa h·ªçc d·ªØ li·ªáu" },
      { value: "DEVOPS_ENGINEER", label: "K·ªπ s∆∞ DevOps" },
      { value: "QA_ENGINEER", label: "K·ªπ s∆∞ QA/Testing" },
      { value: "UI_UX_DESIGNER", label: "Thi·∫øt k·∫ø UI/UX" },
      { value: "SYSTEM_ADMIN", label: "Qu·∫£n tr·ªã h·ªá th·ªëng" },
      { value: "CYBERSECURITY", label: "B·∫£o m·∫≠t th√¥ng tin" },
    ],
    ENGINEERING: [
      { value: "SOFTWARE_ENGINEER", label: "K·ªπ s∆∞ ph·∫ßn m·ªÅm" },
      { value: "MECHANICAL_ENGINEER", label: "K·ªπ s∆∞ c∆° kh√≠" },
      { value: "ELECTRICAL_ENGINEER", label: "K·ªπ s∆∞ ƒëi·ªán" },
      { value: "CIVIL_ENGINEER", label: "K·ªπ s∆∞ x√¢y d·ª±ng" },
      { value: "CHEMICAL_ENGINEER", label: "K·ªπ s∆∞ h√≥a h·ªçc" },
      { value: "INDUSTRIAL_ENGINEER", label: "K·ªπ s∆∞ c√¥ng nghi·ªáp" },
    ],
    FINANCE: [
      { value: "FINANCIAL_ANALYST", label: "Chuy√™n vi√™n ph√¢n t√≠ch t√†i ch√≠nh" },
      { value: "ACCOUNTANT", label: "K·∫ø to√°n vi√™n" },
      { value: "AUDITOR", label: "Ki·ªÉm to√°n vi√™n" },
      { value: "INVESTMENT_BANKER", label: "Chuy√™n vi√™n ƒë·∫ßu t∆∞" },
      { value: "FINANCIAL_ADVISOR", label: "C·ªë v·∫•n t√†i ch√≠nh" },
      { value: "RISK_MANAGER", label: "Qu·∫£n l√Ω r·ªßi ro" },
    ],
    SALES: [
      { value: "SALES_REPRESENTATIVE", label: "ƒê·∫°i di·ªán b√°n h√†ng" },
      { value: "SALES_MANAGER", label: "Qu·∫£n l√Ω b√°n h√†ng" },
      { value: "BUSINESS_DEVELOPMENT", label: "Ph√°t tri·ªÉn kinh doanh" },
      { value: "ACCOUNT_MANAGER", label: "Qu·∫£n l√Ω kh√°ch h√†ng" },
      { value: "SALES_DIRECTOR", label: "Gi√°m ƒë·ªëc b√°n h√†ng" },
    ],
    HR: [
      { value: "HR_SPECIALIST", label: "Chuy√™n vi√™n nh√¢n s·ª±" },
      { value: "HR_MANAGER", label: "Qu·∫£n l√Ω nh√¢n s·ª±" },
      { value: "RECRUITER", label: "Tuy·ªÉn d·ª•ng" },
      { value: "COMPENSATION_SPECIALIST", label: "Chuy√™n vi√™n l∆∞∆°ng th∆∞·ªüng" },
      { value: "TRAINING_SPECIALIST", label: "Chuy√™n vi√™n ƒë√†o t·∫°o" },
    ],
    MARKETING: [
      { value: "DIGITAL_MARKETING", label: "Marketing k·ªπ thu·∫≠t s·ªë" },
      { value: "SEO_SPECIALIST", label: "Chuy√™n vi√™n SEO" },
      { value: "CONTENT_MARKETING", label: "Marketing n·ªôi dung" },
      { value: "SOCIAL_MEDIA_MANAGER", label: "Qu·∫£n l√Ω m·∫°ng x√£ h·ªôi" },
      { value: "MARKETING_MANAGER", label: "Qu·∫£n l√Ω marketing" },
      { value: "BRAND_MANAGER", label: "Qu·∫£n l√Ω th∆∞∆°ng hi·ªáu" },
      { value: "MARKETING_ANALYST", label: "Ph√¢n t√≠ch marketing" },
    ],
    HEALTHCARE: [
      { value: "DOCTOR", label: "B√°c sƒ©" },
      { value: "NURSE", label: "Y t√°" },
      { value: "PHARMACIST", label: "D∆∞·ª£c sƒ©" },
      { value: "MEDICAL_TECHNOLOGIST", label: "K·ªπ thu·∫≠t vi√™n y t·∫ø" },
      { value: "HEALTHCARE_ADMIN", label: "Qu·∫£n l√Ω y t·∫ø" },
    ],
    EDUCATION: [
      { value: "TEACHER", label: "Gi√°o vi√™n" },
      { value: "PROFESSOR", label: "Gi·∫£ng vi√™n" },
      { value: "EDUCATION_ADMIN", label: "Qu·∫£n l√Ω gi√°o d·ª•c" },
      { value: "CURRICULUM_SPECIALIST", label: "Chuy√™n vi√™n ch∆∞∆°ng tr√¨nh" },
    ],
    CONSULTANT: [
      { value: "MANAGEMENT_CONSULTANT", label: "T∆∞ v·∫•n qu·∫£n l√Ω" },
      { value: "IT_CONSULTANT", label: "T∆∞ v·∫•n CNTT" },
      { value: "FINANCIAL_CONSULTANT", label: "T∆∞ v·∫•n t√†i ch√≠nh" },
      { value: "STRATEGY_CONSULTANT", label: "T∆∞ v·∫•n chi·∫øn l∆∞·ª£c" },
    ],
    DESIGNER: [
      { value: "GRAPHIC_DESIGNER", label: "Thi·∫øt k·∫ø ƒë·ªì h·ªça" },
      { value: "UI_UX_DESIGNER", label: "Thi·∫øt k·∫ø UI/UX" },
      { value: "WEB_DESIGNER", label: "Thi·∫øt k·∫ø web" },
      { value: "PRODUCT_DESIGNER", label: "Thi·∫øt k·∫ø s·∫£n ph·∫©m" },
      { value: "INTERIOR_DESIGNER", label: "Thi·∫øt k·∫ø n·ªôi th·∫•t" },
    ],
    ACCOUNTANT: [
      { value: "ACCOUNTANT", label: "K·∫ø to√°n vi√™n" },
      { value: "SENIOR_ACCOUNTANT", label: "K·∫ø to√°n tr∆∞·ªüng" },
      { value: "AUDITOR", label: "Ki·ªÉm to√°n vi√™n" },
      { value: "TAX_SPECIALIST", label: "Chuy√™n vi√™n thu·∫ø" },
    ],
    LAWYER: [
      { value: "LAWYER", label: "Lu·∫≠t s∆∞" },
      { value: "LEGAL_ADVISOR", label: "C·ªë v·∫•n ph√°p l√Ω" },
      { value: "PARALEGAL", label: "Tr·ª£ l√Ω lu·∫≠t s∆∞" },
      { value: "COMPLIANCE_SPECIALIST", label: "Chuy√™n vi√™n tu√¢n th·ªß" },
    ],
    OTHER: [{ value: "GENERAL", label: "V·ªã tr√≠ kh√°c" }],
  };

  // L·∫•y danh s√°ch v·ªã tr√≠ theo ng√†nh ngh·ªÅ ƒë√£ ch·ªçn
  const getPositionsForCategory = (category) => {
    return jobPositions[category] || [];
  };

  return (
    <Paper className="main-card" elevation={3}>
      <Typography
        variant="h5"
        component="h1"
        gutterBottom
        className="form-title"
      >
        üöÄ H·ªá th·ªëng ph√¢n t√≠ch CV-JD AI
      </Typography>

      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Lu·ªìng ho·∫°t ƒë·ªông 6 b∆∞·ªõc: Nh·∫≠n di·ªán CV ‚Üí Ph√¢n t√≠ch JD ‚Üí So s√°nh ‚Üí G·ª£i √Ω ‚Üí
        Skills thi·∫øu ‚Üí Ch·∫•m ƒëi·ªÉm ATS
      </Typography>

      <form onSubmit={handleSubmit}>
        {/* B∆Ø·ªöC 1: Upload CV */}
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon="‚ñº">
            <Typography variant="h6">üìÑ B∆Ø·ªöC 1: T·∫£i l√™n CV</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box mb={3}>
              <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                <Typography variant="subtitle1">T·∫£i l√™n CV c·ªßa b·∫°n</Typography>
              </Box>
              <Box
                {...getRootProps()}
                className={`dropzone ${isDragActive ? "active" : ""}`}
              >
                <input {...getInputProps()} />
                {isDragActive ? (
                  <Typography>Th·∫£ file v√†o ƒë√¢y...</Typography>
                ) : (
                  <Typography>
                    K√©o v√† th·∫£ file CV, ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn file
                  </Typography>
                )}
                <Typography variant="caption" color="text.secondary" mt={1}>
                  (PDF, DOCX, TXT)
                </Typography>
              </Box>
              {cvFile && (
                <Alert severity="success" sx={{ mt: 2 }}>
                  ‚úÖ ƒê√£ ch·ªçn file: {cvFile.name}
                </Alert>
              )}
            </Box>
          </AccordionDetails>
        </Accordion>

        {/* B∆Ø·ªöC 2: Ch·ªçn ng√†nh ngh·ªÅ v√† v·ªã tr√≠ */}
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon="‚ñº">
            <Typography variant="h6">
              üéØ B∆Ø·ªöC 2: Ch·ªçn ng√†nh ngh·ªÅ & v·ªã tr√≠
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box mb={3}>
              <FormControl fullWidth required sx={{ mb: 2 }}>
                <InputLabel>Ng√†nh ngh·ªÅ ·ª©ng tuy·ªÉn</InputLabel>
                <Select
                  value={jobCategory}
                  label="Ng√†nh ngh·ªÅ ·ª©ng tuy·ªÉn"
                  onChange={(e) => {
                    setJobCategory(e.target.value);
                    setJobPosition(""); // Reset v·ªã tr√≠ khi ƒë·ªïi ng√†nh
                  }}
                >
                  {jobCategories.map((category) => (
                    <MenuItem key={category.value} value={category.value}>
                      {category.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              {jobCategory && (
                <FormControl fullWidth required>
                  <InputLabel>V·ªã tr√≠ c·ª• th·ªÉ</InputLabel>
                  <Select
                    value={jobPosition}
                    label="V·ªã tr√≠ c·ª• th·ªÉ"
                    onChange={(e) => setJobPosition(e.target.value)}
                  >
                    {getPositionsForCategory(jobCategory).map((position) => (
                      <MenuItem key={position.value} value={position.value}>
                        {position.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              )}

              <Typography
                variant="caption"
                color="text.secondary"
                sx={{ mt: 1, display: "block" }}
              >
                H·ªá th·ªëng s·∫Ω ph√¢n t√≠ch CV theo ti√™u ch√≠ c·ªßa ng√†nh ngh·ªÅ v√† v·ªã tr√≠
                n√†y
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        {/* B∆Ø·ªöC 3: Nh·∫≠p JD */}
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon="‚ñº">
            <Typography variant="h6">
              üìã B∆Ø·ªöC 3: M√¥ t·∫£ c√¥ng vi·ªác (JD)
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box mb={3}>
              <TextField
                label="D√°n m√¥ t·∫£ c√¥ng vi·ªác v√†o ƒë√¢y"
                multiline
                rows={8}
                variant="outlined"
                fullWidth
                value={jdText}
                onChange={(e) => setJdText(e.target.value)}
                required
                placeholder="V√≠ d·ª•: Tuy·ªÉn d·ª•ng Senior Python Developer...
Y√™u c·∫ßu:
- Kinh nghi·ªám 3+ nƒÉm v·ªõi Python
- Th√†nh th·∫°o Django, Flask
- Bi·∫øt s·ª≠ d·ª•ng PostgreSQL, Redis
- C√≥ kinh nghi·ªám v·ªõi AWS, Docker"
              />
              <Typography
                variant="caption"
                color="text.secondary"
                sx={{ mt: 1, display: "block" }}
              >
                H·ªá th·ªëng s·∫Ω tr√≠ch xu·∫•t skills v√† y√™u c·∫ßu t·ª´ JD n√†y
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        {/* B∆Ø·ªöC 4: Y√™u c·∫ßu b·ªï sung */}
        <Accordion>
          <AccordionSummary expandIcon="‚ñº">
            <Typography variant="h6">
              ‚öôÔ∏è B∆Ø·ªöC 4: Y√™u c·∫ßu b·ªï sung (t√πy ch·ªçn)
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box mb={3}>
              <TextField
                label="Nh·∫≠p c√°c y√™u c·∫ßu ho·∫∑c k·ªπ nƒÉng b·ªï sung"
                multiline
                rows={3}
                variant="outlined"
                fullWidth
                value={jobRequirements}
                onChange={(e) => setJobRequirements(e.target.value)}
                placeholder="V√≠ d·ª•: K·ªπ nƒÉng leadership, kinh nghi·ªám qu·∫£n l√Ω team, ch·ª©ng ch·ªâ AWS..."
              />
              <Typography
                variant="caption"
                color="text.secondary"
                sx={{ mt: 1, display: "block" }}
              >
                C√°c y√™u c·∫ßu n√†y s·∫Ω ƒë∆∞·ª£c th√™m v√†o ph√¢n t√≠ch
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        {/* Th√¥ng tin lu·ªìng ho·∫°t ƒë·ªông */}
        <Box
          sx={{
            mb: 3,
            p: 2,
            bgcolor: "background.paper",
            borderRadius: 1,
            border: "1px solid #e0e0e0",
          }}
        >
          <Typography variant="subtitle2" gutterBottom>
            üîÑ Lu·ªìng ho·∫°t ƒë·ªông h·ªá th·ªëng:
          </Typography>
          <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mt: 1 }}>
            <Chip label="B1: Nh·∫≠n di·ªán CV" size="small" color="primary" />
            <Chip label="B2: Ph√¢n t√≠ch JD" size="small" color="primary" />
            <Chip label="B3: So s√°nh CV-JD" size="small" color="primary" />
            <Chip label="B4: G·ª£i √Ω c·∫£i thi·ªán" size="small" color="primary" />
            <Chip label="B5: Skills thi·∫øu" size="small" color="primary" />
            <Chip label="B6: Ch·∫•m ƒëi·ªÉm ATS" size="small" color="primary" />
          </Box>
        </Box>

        {/* N√∫t ph√¢n t√≠ch */}
        <Button
          type="submit"
          variant="contained"
          color="secondary"
          size="large"
          fullWidth
          disabled={
            loading || !cvFile || !jdText || !jobCategory || !jobPosition
          }
          startIcon={
            loading ? <CircularProgress size={20} color="inherit" /> : null
          }
          sx={{
            py: 1.5,
            fontSize: "1.1rem",
            background: "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",
            "&:hover": {
              background: "linear-gradient(45deg, #FF8E53 30%, #FE6B8B 90%)",
            },
          }}
        >
          {loading ? "ƒêang ph√¢n t√≠ch..." : "üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch CV-JD"}
        </Button>

        {error && (
          <Alert severity="error" sx={{ mt: 2 }}>
            ‚ùå L·ªói: {error}
          </Alert>
        )}
      </form>
    </Paper>
  );
};

export default InputForm;
